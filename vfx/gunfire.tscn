[gd_scene load_steps=7 format=3 uid="uid://bw3d2v4j6j3qw"]

[ext_resource type="Texture2D" uid="uid://bcl7rfhga08d2" path="res://vfx/muzzleflasheffect_001.png" id="1_cai81"]

[sub_resource type="Shader" id="Shader_0uo6o"]
code = "shader_type spatial;
render_mode blend_add,depth_draw_opaque,cull_disabled,
diffuse_toon,specular_disabled,unshaded,shadows_disabled,
ambient_light_disabled,fog_disabled;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;

uniform int particles_anim_h_frames;
uniform int particles_anim_v_frames;
//uniform bool particles_anim_loop;

void vertex() {
	float h_frames = float(particles_anim_h_frames);
	float v_frames = float(particles_anim_v_frames);
	float particle_total_frames = float(particles_anim_h_frames * particles_anim_v_frames);
	float particle_frame = floor(INSTANCE_CUSTOM.z * float(particle_total_frames));
	
	// We don't want to cycle so  the if is removed.
	particle_frame = clamp(particle_frame, 0.0, particle_total_frames - 1.0);
	//if (!particles_anim_loop) {
		//particle_frame = clamp(particle_frame, 0.0, particle_total_frames - 1.0);
	//} else {
		//particle_frame = mod(particle_frame, particle_total_frames);
	//}
	
	UV /= vec2(h_frames, v_frames);
	UV += vec2(mod(particle_frame, h_frames) / h_frames, floor((particle_frame + 0.5) / h_frames) / v_frames);
}


float fresnel(float amount, vec3 normal, vec3 view){
	return pow((1.0 - clamp(dot(normalize(normal), normalize(view)), 0.0, 1.0 )), amount);
}
// The inverse fresnel is used to fade away the sprite-like geometry when viewed from the front,
// this improves the look of it and whenever is looked from the sides it get's displayed at full
// opacity, control the amount for a stronger or weaker effect.
float inverse_fresnel(float amount, vec3 normal, vec3 view){
	return pow(clamp(dot(normalize(normal), normalize(view)), 0.0, 1.0), amount);
}

void fragment() {
	vec4 albedo_tex = texture(texture_albedo,UV);
	ALBEDO = albedo_tex.rgb * COLOR.rgb * albedo_tex.a * 4.0;
	ALPHA = (albedo_tex.a * inverse_fresnel(1.5, NORMAL, VIEW) * COLOR.a); // Fade away when looking at front view the muzzleflare using a fresnel.
	ALPHA_SCISSOR_THRESHOLD = 0.001;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_oxh8p"]
render_priority = 0
shader = SubResource("Shader_0uo6o")
shader_parameter/particles_anim_h_frames = 2
shader_parameter/particles_anim_v_frames = 2
shader_parameter/texture_albedo = ExtResource("1_cai81")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_3h2be"]
particle_flag_align_y = true
particle_flag_rotate_y = true
direction = Vector3(0, 0, -1)
spread = 0.0
initial_velocity_min = 0.1
initial_velocity_max = 0.1
gravity = Vector3(0, 0, 0)
color = Color(1, 0.686252, 0.0195702, 1)
anim_offset_max = 1.0

[sub_resource type="QuadMesh" id="QuadMesh_eyi8k"]
orientation = 0

[sub_resource type="QuadMesh" id="QuadMesh_oqskg"]

[node name="GPUParticles3D2" type="GPUParticles3D"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, -0.45, 0, 0)
material_override = SubResource("ShaderMaterial_oxh8p")
amount = 1
lifetime = 0.1
interp_to_end = 0.99
visibility_aabb = AABB(-0.328572, -0.64904, -0.443773, 0.657144, 1.29808, 0.887545)
local_coords = true
process_material = SubResource("ParticleProcessMaterial_3h2be")
draw_passes = 2
draw_pass_1 = SubResource("QuadMesh_eyi8k")
draw_pass_2 = SubResource("QuadMesh_oqskg")
